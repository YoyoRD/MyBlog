<!DOCTYPE html><html lang="zh-CN" data-theme="light"><head><meta charset="UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Addressable Asset Catalog分析 | Yoyo</title><meta name="description" content="Addressable Asset Catalog分析 Catalog作为追址的配置文件，是序列化class ContentCatalogData 得到的 Json 文件。   流程分析 编辑器上按钮的回调在 AddressableAssetsSettingsGroupEditor.cs 内的 void OnBuildScript()    Build 的API 为：AddressableAsse"><meta name="keywords" content="Unity,AddressableAsset,资源加载"><meta name="author" content="Yoyo"><meta name="copyright" content="Yoyo"><meta name="format-detection" content="telephone=no"><link rel="shortcut icon" href="/img/favicon.jpg"><link rel="canonical" href="https://yoyord.github.io/year/10/09/AddressableAsset%20Catalog%E5%88%86%E6%9E%90"><meta http-equiv="Cache-Control" content="no-transform"><meta http-equiv="Cache-Control" content="no-siteapp"><link rel="preconnect" href="//cdn.jsdelivr.net"/><link rel="preconnect" href="//fonts.googleapis.com" crossorigin="crossorigin"/><link rel="preconnect" href="//busuanzi.ibruce.info"/><link rel="preconnect" href="//zz.bdstatic.com"/><meta property="og:type" content="article"><meta property="og:title" content="Addressable Asset Catalog分析"><meta property="og:url" content="https://yoyord.github.io/year/10/09/AddressableAsset%20Catalog%E5%88%86%E6%9E%90"><meta property="og:site_name" content="Yoyo"><meta property="og:description" content="Addressable Asset Catalog分析 Catalog作为追址的配置文件，是序列化class ContentCatalogData 得到的 Json 文件。   流程分析 编辑器上按钮的回调在 AddressableAssetsSettingsGroupEditor.cs 内的 void OnBuildScript()    Build 的API 为：AddressableAsse"><meta property="og:image" content="https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"><meta property="article:published_time" content="2020-10-09T10:30:00.000Z"><meta property="article:modified_time" content="2020-10-09T10:30:00.000Z"><meta name="twitter:card" content="summary"><script>var activateDarkMode = function () {
  document.documentElement.setAttribute('data-theme', 'dark')
  if (document.querySelector('meta[name="theme-color"]') !== null) {
    document.querySelector('meta[name="theme-color"]').setAttribute('content', '#000')
  }
}
var activateLightMode = function () {
  document.documentElement.setAttribute('data-theme', 'light')
  if (document.querySelector('meta[name="theme-color"]') !== null) {
    document.querySelector('meta[name="theme-color"]').setAttribute('content', '#fff')
  }
}

var getCookies = function (name) {
  const value = `; ${document.cookie}`
  const parts = value.split(`; ${name}=`)
  if (parts.length === 2) return parts.pop().split(';').shift()
}

var autoChangeMode = 'false'
var t = getCookies('theme')
if (autoChangeMode === '1') {
  var isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches
  var isLightMode = window.matchMedia('(prefers-color-scheme: light)').matches
  var isNotSpecified = window.matchMedia('(prefers-color-scheme: no-preference)').matches
  var hasNoSupport = !isDarkMode && !isLightMode && !isNotSpecified

  if (t === undefined) {
    if (isLightMode) activateLightMode()
    else if (isDarkMode) activateDarkMode()
    else if (isNotSpecified || hasNoSupport) {
      console.log('You specified no preference for a color scheme or your browser does not support it. I Schedule dark mode during night time.')
      var now = new Date()
      var hour = now.getHours()
      var isNight = hour <= 6 || hour >= 18
      isNight ? activateDarkMode() : activateLightMode()
    }
    window.matchMedia('(prefers-color-scheme: dark)').addListener(function (e) {
      if (Cookies.get('theme') === undefined) {
        e.matches ? activateDarkMode() : activateLightMode()
      }
    })
  } else if (t === 'light') activateLightMode()
  else activateDarkMode()
} else if (autoChangeMode === '2') {
  now = new Date()
  hour = now.getHours()
  isNight = hour <= 6 || hour >= 18
  if (t === undefined) isNight ? activateDarkMode() : activateLightMode()
  else if (t === 'light') activateLightMode()
  else activateDarkMode()
} else {
  if (t === 'dark') activateDarkMode()
  else if (t === 'light') activateLightMode()
}</script><link rel="stylesheet" href="/css/index.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.css"><link rel="prev" title="高性能Lua代码" href="https://yoyord.github.io/year/10/09/%E9%AB%98%E6%80%A7%E8%83%BDLua%E4%BB%A3%E7%A0%81"><link rel="next" title="渲染基础" href="https://yoyord.github.io/year/10/09/%E6%B8%B2%E6%9F%93%E5%9F%BA%E7%A1%80"><link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Titillium+Web&amp;display=swap"><script>var GLOBAL_CONFIG = { 
  root: '/',
  algolia: undefined,
  localSearch: undefined,
  translate: {"defaultEncoding":2,"translateDelay":0,"msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"簡"},
  noticeOutdate: {"limitDay":500,"position":"top","messagePrev":"It has been","messageNext":"days since the last update, the content of the article may be outdated."},
  copy: {
    success: '复制成功',
    error: '复制错误',
    noSupport: '浏览器不支持'
  },
  bookmark: {
    message_prev: '按',
    message_next: '键将本页加入书签'
  },
  runtime_unit: '天',
  runtime: false,
  copyright: undefined,
  ClickShowText: undefined,
  medium_zoom: true,
  fancybox: true,
  Snackbar: {"bookmark":{"message_prev":"按","message_next":"键将本页加入书签"},"chs_to_cht":"你已切换为繁体","cht_to_chs":"你已切换为简体","day_to_night":"你已切换为深色模式","night_to_day":"你已切换为浅色模式","bgLight":"#49b1f5","bgDark":"#121212","position":"bottom-left"},
  justifiedGallery: {
    js: 'https://cdn.jsdelivr.net/npm/justifiedGallery/dist/js/jquery.justifiedGallery.min.js',
    css: 'https://cdn.jsdelivr.net/npm/justifiedGallery/dist/css/justifiedGallery.min.css'
  },
  baiduPush: true,
  highlightCopy: true,
  highlightLang: true,
  isPhotoFigcaption: false,
  islazyload: true,
  isanchor: false    
}</script><script>var GLOBAL_CONFIG_SITE = { 
  isPost: true,
  isHome: false,
  isHighlightShrink: false,
  isSidebar: true,
  postUpdate: '2020-10-09 18:30:00'
}</script><noscript><style>
#nav {
  opacity: 1
}
.justified-gallery img{
  opacity: 1
}
</style></noscript><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free/css/all.min.css"><meta name="generator" content="Hexo 6.1.0"></head><body><div id="mobile-sidebar"><div id="menu_mask"></div><div id="mobile-sidebar-menus"><div class="mobile_author_icon"><img class="avatar-img" src="https://portrait.gitee.com/uploads/avatars/user/167/502893_Yoyo21_1578925881.png!avatar100" onerror="onerror=null;src='/img/friend_404.gif'" alt="avatar"/></div><div class="mobile_post_data"><div class="mobile_data_item is-center"><div class="mobile_data_link"><a href="/archives/"><div class="headline">文章</div><div class="length_num">24</div></a></div></div><div class="mobile_data_item is-center">      <div class="mobile_data_link"><a href="/tags/"><div class="headline">标签</div><div class="length_num">36</div></a></div></div></div><hr/><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><i class="fa-fw fa fa-home"></i><span> 首页</span></a></div><div class="menus_item"><a class="site-page" href="/archives/"><i class="fa-fw fa fa-archive"></i><span> 时间轴</span></a></div><div class="menus_item"><a class="site-page" href="/tags/"><i class="fa-fw fa fa-tags"></i><span> 标签</span></a></div><div class="menus_item"><a class="site-page" href="/categories/"><i class="fa-fw fa fa-folder-open"></i><span> 分类</span></a></div><div class="menus_item"><a class="site-page"><i class="fa-fw fas fa-list"></i><span> 媒体</span><i class="fas fa-chevron-down menus-expand"></i></a><ul class="menus_item_child"><li><a class="site-page" href="/bangumis/"><i class="fa-fw fab fa-youtube"></i><span> 番剧</span></a></li><li><a class="site-page" href="/movies/"><i class="fa-fw fa fa-film"></i><span> 电影</span></a></li><li><a class="site-page" href="/books/"><i class="fa-fw fas fa-book"></i><span> 书单</span></a></li><li><a class="site-page" href="/music/"><i class="fa-fw fa fa-music"></i><span> 音乐</span></a></li></ul></div></div></div></div><i class="fas fa-arrow-right on" id="toggle-sidebar"></i><div id="sidebar"><div class="sidebar-toc"><div class="sidebar-toc__title">目录</div><div class="sidebar-toc__progress"><span class="progress-notice">你已经读了</span><span class="progress-num">0</span><span class="progress-percentage">%</span><div class="sidebar-toc__progress-bar">     </div></div><div class="sidebar-toc__content"><ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#Addressable-Asset-Catalog%E5%88%86%E6%9E%90"><span class="toc-number">1.</span> <span class="toc-text">Addressable Asset Catalog分析</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90"><span class="toc-number">1.1.</span> <span class="toc-text">流程分析</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB"><span class="toc-number">1.2.</span> <span class="toc-text">序列化类</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%8A%A0%E8%BD%BDCatalog%E7%9A%84%E8%BF%87%E7%A8%8B"><span class="toc-number">1.3.</span> <span class="toc-text">加载Catalog的过程</span></a></li></ol></li></ol></div></div></div><div id="body-wrap"><div id="web_bg" data-type="photo"></div><header class="post-bg" id="page-header" style="background-image: url(https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg)"><nav id="nav"><span class="pull-left" id="blog_name"><a class="blog_title" id="site-name" href="/">Yoyo</a></span><span class="pull-right menus"><div class="menus_items"><div class="menus_item"><a class="site-page" href="/"><i class="fa-fw fa fa-home"></i><span> 首页</span></a></div><div class="menus_item"><a class="site-page" href="/archives/"><i class="fa-fw fa fa-archive"></i><span> 时间轴</span></a></div><div class="menus_item"><a class="site-page" href="/tags/"><i class="fa-fw fa fa-tags"></i><span> 标签</span></a></div><div class="menus_item"><a class="site-page" href="/categories/"><i class="fa-fw fa fa-folder-open"></i><span> 分类</span></a></div><div class="menus_item"><a class="site-page"><i class="fa-fw fas fa-list"></i><span> 媒体</span><i class="fas fa-chevron-down menus-expand"></i></a><ul class="menus_item_child"><li><a class="site-page" href="/bangumis/"><i class="fa-fw fab fa-youtube"></i><span> 番剧</span></a></li><li><a class="site-page" href="/movies/"><i class="fa-fw fa fa-film"></i><span> 电影</span></a></li><li><a class="site-page" href="/books/"><i class="fa-fw fas fa-book"></i><span> 书单</span></a></li><li><a class="site-page" href="/music/"><i class="fa-fw fa fa-music"></i><span> 音乐</span></a></li></ul></div></div><span class="toggle-menu close"><a class="site-page"><i class="fas fa-bars fa-fw"></i></a></span></span></nav><div id="post-info"><div id="post-title"><div class="posttitle">Addressable Asset Catalog分析</div></div><div id="post-meta"><div class="meta-firstline"><time class="post-meta__date"><span class="post-meta__date-created" title="发表于 2020-10-09 18:30:00"><i class="far fa-calendar-alt fa-fw"></i> 发表于 2020-10-09</span><span class="post-meta__separator">|</span><span class="post-meta__date-updated" title="更新于 2020-10-09 18:30:00"><i class="fas fa-history fa-fw"></i> 更新于 2020-10-09</span></time></div><div class="meta-secondline"> </div><div class="meta-thirdline"><span class="post-meta-pv-cv"><i class="far fa-eye fa-fw post-meta__icon"></i><span>阅读量:</span><span id="busuanzi_value_page_pv"></span></span></div></div></div></header><main class="layout_post" id="content-inner"><article id="post"><div class="post-content" id="article-container"><h1 id="Addressable-Asset-Catalog分析"><a href="#Addressable-Asset-Catalog分析" class="headerlink" title="Addressable Asset Catalog分析"></a>Addressable Asset Catalog分析</h1><ul>
<li>Catalog作为追址的配置文件，是序列化class ContentCatalogData 得到的 Json 文件。</li>
</ul>
<hr>
<h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><ul>
<li>编辑器上按钮的回调在 AddressableAssetsSettingsGroupEditor.cs 内的 void OnBuildScript()</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/Yoyo21/image-hosting/raw/master/img/image-20201009180556915.png" alt="image-20201009180556915"></p>
<ul>
<li><p>Build 的API 为：AddressableAssetSettings.BuildPlayerContent();</p>
</li>
<li><p>在这个过程中 就会让 AddressableAssetSettingsDefaultObject.Settings 传参赋值</p>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">void</span> <span class="title">BuildPlayerContentImpl</span>()</span></span><br><span class="line">       &#123;</span><br><span class="line">       	<span class="comment">//判断Addressables.BuildPath 路径是否存在 存在则删除</span></span><br><span class="line">           <span class="keyword">if</span> (Directory.Exists(Addressables.BuildPath))</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">try</span></span><br><span class="line">               &#123;</span><br><span class="line">                   Directory.Delete(Addressables.BuildPath, <span class="literal">true</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">catch</span> (Exception e)</span><br><span class="line">               &#123;</span><br><span class="line">                   Debug.LogException(e);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       	<span class="comment">// 构造AddressablesDataBuilderInput</span></span><br><span class="line">       	<span class="comment">// 根据AddressableAssetSettings 生成 bundle 记录catalog等</span></span><br><span class="line">           <span class="keyword">var</span> buildContext = <span class="keyword">new</span> AddressablesDataBuilderInput(<span class="keyword">this</span>);</span><br><span class="line">       	<span class="comment">//这就实际是调用 BuildScriptBase 的 BuildData()</span></span><br><span class="line">       	<span class="comment">//TResult 为 AddressablesPlayerBuildResult 类型</span></span><br><span class="line">           <span class="keyword">var</span> result = ActivePlayerDataBuilder.BuildData&lt;AddressablesPlayerBuildResult&gt;(buildContext);</span><br><span class="line">           <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(result.Error))</span><br><span class="line">               Debug.LogError(result.Error);</span><br><span class="line">           AddressableAnalytics.Report(<span class="keyword">this</span>);</span><br><span class="line">           <span class="keyword">if</span> (BuildScript.buildCompleted != <span class="literal">null</span>)</span><br><span class="line">               BuildScript.buildCompleted(result);</span><br><span class="line">       	<span class="comment">//刷新</span></span><br><span class="line">           AssetDatabase.Refresh();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>比较绕的点在这里: ActivePlayerDataBuilder的实际类，是根据打包时候 选择的Play Model 不同而不同</li>
<li>如下图 四种参数的实例对象</li>
</ul>
<p><img src= "/img/loading.gif" data-src="https://gitee.com/Yoyo21/image-hosting/raw/master/img/image-20201009180611005.png" alt="image-20201009180611005"></p>
<ul>
<li>根据不同的打包模式会跳到不同的类的实现方法，会赋值不同的参数，最终还是会跳转到BuildScriptBase类的方法。</li>
</ul>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TResult <span class="title">BuildData</span>&lt;<span class="title">TResult</span>&gt;(<span class="params">AddressablesDataBuilderInput builderInput</span>) <span class="keyword">where</span> TResult : IDataBuilderResult</span></span><br><span class="line">       &#123;</span><br><span class="line">          <span class="comment">// xxxxxxxx</span></span><br><span class="line">           TResult result;</span><br><span class="line">           <span class="comment">// 语法块 ScopedBuildStep 实现了 IDisposable 接口 所以在语法块完成之后 会被释放</span></span><br><span class="line">           <span class="keyword">using</span> (m_Log.ScopedStep(LogLevel.Info, <span class="string">$&quot;Building <span class="subst">&#123;<span class="keyword">this</span>.Name&#125;</span>&quot;</span>))</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">// 由 子类去实现了 BuildDataImplementation方法</span></span><br><span class="line">               result = BuildDataImplementation&lt;TResult&gt;(builderInput);</span><br><span class="line">               <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">                   result.FileRegistry = builderInput.Registry;</span><br><span class="line">           &#125;</span><br><span class="line">		<span class="comment">// xxxxxxxxx</span></span><br><span class="line">           <span class="keyword">return</span> result;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>子类的实现方法：</li>
</ul>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> TResult <span class="title">BuildDataImplementation</span>&lt;<span class="title">TResult</span>&gt;(<span class="params">AddressablesDataBuilderInput builderInput</span>)</span></span><br><span class="line">      &#123;</span><br><span class="line">          TResult result = <span class="literal">default</span>(TResult);</span><br><span class="line">          <span class="keyword">var</span> timer = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">          timer.Start();</span><br><span class="line">          <span class="comment">// CataLog的源数据是 AddressableAssetsBuildContext </span></span><br><span class="line">          <span class="comment">// 根据builderInput生成AddressableAssetsBuildContext</span></span><br><span class="line">          InitializeBuildContext(builderInput, <span class="keyword">out</span> AddressableAssetsBuildContext aaContext);</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">using</span> (m_Log.ScopedStep(LogLevel.Info, <span class="string">&quot;ProcessAllGroups&quot;</span>))</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="comment">// 内部有guid去拿到Assetsetting的Path,如果errorString 不为空则抛出Result CallBack</span></span><br><span class="line">              <span class="keyword">var</span> errorString = ProcessAllGroups(aaContext);</span><br><span class="line">              <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(errorString))</span><br><span class="line">                  result = AddressableAssetBuildResult.CreateResult&lt;TResult&gt;(<span class="literal">null</span>, <span class="number">0</span>, errorString);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (result == <span class="literal">null</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="comment">//实际去调用子类的DoBuild方法去打包生成ab还有json hash文件</span></span><br><span class="line">              result = DoBuild&lt;TResult&gt;(builderInput, aaContext);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">              result.Duration = timer.Elapsed.TotalSeconds;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>catalog hash生成代码：</li>
</ul>
<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">           <span class="comment">//构建ContentCatalogData类,传参赋值</span></span><br><span class="line">		<span class="keyword">var</span> contentCatalog = <span class="keyword">new</span> ContentCatalogData(aaContext.locations, ResourceManagerRuntimeData.kCatalogAddress);</span><br><span class="line">		<span class="comment">//加上所有的ResourceProvider(prefab)</span></span><br><span class="line">           contentCatalog.ResourceProviderData.AddRange(m_ResourceProviderData);</span><br><span class="line">           <span class="keyword">foreach</span> (<span class="keyword">var</span> t <span class="keyword">in</span> aaContext.providerTypes) </span><br><span class="line">           &#123;</span><br><span class="line">               <span class="comment">//把 AddressableAssetsBuildContext里面的providerTypes[i] 赋值给 contentCatalog.ResourceProviderData</span></span><br><span class="line">contentCatalog.ResourceProviderData.Add(ObjectInitializationData.CreateSerializedInitializationData(t));</span><br><span class="line">           &#125;</span><br><span class="line">		<span class="comment">// 数据类同ResourceProviderData</span></span><br><span class="line">           contentCatalog.InstanceProviderData = ObjectInitializationData.CreateSerializedInitializationData(instanceProviderType.Value);</span><br><span class="line">           <span class="comment">// 数据类同ResourceProviderData</span></span><br><span class="line">		contentCatalog.SceneProviderData = ObjectInitializationData.CreateSerializedInitializationData(sceneProviderType.Value);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//序列化 保存文件</span></span><br><span class="line">           <span class="keyword">var</span> jsonText = JsonUtility.ToJson(contentCatalog);</span><br><span class="line">           CreateCatalogFiles(jsonText, builderInput, aaContext);</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="序列化类"><a href="#序列化类" class="headerlink" title="序列化类"></a>序列化类</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ContentCatalogData</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="comment">// ResourceManagerRuntimeData.kCatalogAddress</span></span><br><span class="line">      [<span class="meta">SerializeField</span>]</span><br><span class="line">      <span class="keyword">internal</span> <span class="built_in">string</span> m_LocatorId;  </span><br><span class="line">      </span><br><span class="line">       <span class="comment">/* m_InstanceProviderData 内可序列化的字符串</span></span><br><span class="line"><span class="comment">       * m_Id 为 Provider类型 的字符串</span></span><br><span class="line"><span class="comment">       * m_ObjectType 里面含有 &#123;m_AssemblyName :包含版本号 token 等信息 m_Data 序列化数据对象的JSON字符串  &#125;</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      [<span class="meta">SerializeField</span>]</span><br><span class="line">      ObjectInitializationData m_InstanceProviderData;</span><br><span class="line">      </span><br><span class="line"><span class="comment">//m_ResourceProviderData 的结构和m_ObjectType一样 只是存储的是 BundledAssetProvider</span></span><br><span class="line">      [<span class="meta">SerializeField</span>]</span><br><span class="line">      <span class="keyword">internal</span> List&lt;ObjectInitializationData&gt; m_ResourceProviderData = <span class="keyword">new</span> List&lt;ObjectInitializationData&gt;();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//m_SceneProviderData 	的结构和m_ObjectType一样 只是存储的是SceneProvider</span></span><br><span class="line">      [<span class="meta">SerializeField</span>]</span><br><span class="line">      ObjectInitializationData m_SceneProviderData;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//m_InternalIds 类型为string[] 存储的是 所有bundle的实际打包or项目路径 分别为bundle 与 prefab</span></span><br><span class="line">      [<span class="meta">FormerlySerializedAs(<span class="string">&quot;m_internalIds&quot;</span>)</span>]</span><br><span class="line">      [<span class="meta">SerializeField</span>]</span><br><span class="line">      <span class="keyword">internal</span> <span class="built_in">string</span>[] m_InternalIds = <span class="literal">null</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// ToBase64String 得到的值</span></span><br><span class="line">      <span class="comment">// 由所有生成文件的名字 对称加密过程</span></span><br><span class="line">      [<span class="meta">SerializeField</span>]</span><br><span class="line">      <span class="keyword">internal</span> <span class="built_in">string</span> m_KeyDataString = <span class="literal">null</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 与上配套，对称加密过程</span></span><br><span class="line">      <span class="comment">// Convert.ToBase64String</span></span><br><span class="line">      [<span class="meta">FormerlySerializedAs(<span class="string">&quot;m_bucketDataString&quot;</span>)</span>]</span><br><span class="line">      [<span class="meta">SerializeField</span>]</span><br><span class="line">      <span class="keyword">internal</span> <span class="built_in">string</span> m_BucketDataString = <span class="literal">null</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 将所有的 prefab为AssetBundleRequestOptions 还有bundle:ResourceProviders 的数据放入数组加密得到 m_ExtraDataString</span></span><br><span class="line">      [<span class="meta">FormerlySerializedAs(<span class="string">&quot;m_extraDataString&quot;</span>)</span>]</span><br><span class="line">      [<span class="meta">SerializeField</span>]</span><br><span class="line">      <span class="keyword">internal</span> <span class="built_in">string</span> m_ExtraDataString = <span class="literal">null</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//唯一Key的string []</span></span><br><span class="line">      [<span class="meta">SerializeField</span>]</span><br><span class="line">      <span class="keyword">internal</span> <span class="built_in">string</span>[] m_Keys = <span class="literal">null</span>;</span><br><span class="line">      </span><br><span class="line">      [<span class="meta">SerializeField</span>]</span><br><span class="line">      <span class="keyword">internal</span> SerializedType[] m_resourceTypes = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h2 id="加载Catalog的过程"><a href="#加载Catalog的过程" class="headerlink" title="加载Catalog的过程"></a>加载Catalog的过程</h2><ul>
<li>时间： 每次InstantiateAsync的时候会调用一次 CreateInitializationOperation()</li>
<li>如果 hasStartedInitialization &#x3D; ture 证明初始化过 就不再走 CreateInitializationOperation()</li>
<li>InitializationOperation 接口会调用 Execute() </li>
<li>先从本地的catalog.bundle 生成ContentCatalogData,调用到 OnCatalogDataLoaded()</li>
<li>因为拿到了ContentCatalogData , cataLog 的序列化结构都能获取到 加入到Impl的m_ResourceLocators下 存储到ResourceManager的m_providerMap类型是hash</li>
<li>实际拿资源 ProvideResource(IResourceLocation location) hash对比 如果有 则直接返回 AsyncOperationHandle<TObject> 内部其实也是调用了GetResourceProvider()</li>
<li>解密方式为 : location.ProviderId.GetHashCode() * 31 + (t &#x3D;&#x3D; null ? 0 : t.GetHashCode()</li>
</ul>
</div><div class="post-copyright"><div class="post-copyright__author"><span class="post-copyright-meta">文章作者: </span><span class="post-copyright-info"><a href="mailto:undefined">Yoyo</a></span></div><div class="post-copyright__type"><span class="post-copyright-meta">文章链接: </span><span class="post-copyright-info"><a href="https://yoyord.github.io/year/10/09/AddressableAsset%20Catalog%E5%88%86%E6%9E%90">https://yoyord.github.io/year/10/09/AddressableAsset%20Catalog%E5%88%86%E6%9E%90</a></span></div><div class="post-copyright__notice"><span class="post-copyright-meta">版权声明: </span><span class="post-copyright-info">本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">CC BY-NC-SA 4.0</a> 许可协议。转载请注明来自 <a href="https://yoyord.github.io" target="_blank">Yoyo</a>！</span></div></div><div class="tag_share"><div class="post-meta__tag-list"><a class="post-meta__tags" href="/tags/Unity/">Unity</a><a class="post-meta__tags" href="/tags/AddressableAsset/">AddressableAsset</a><a class="post-meta__tags" href="/tags/%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/">资源加载</a></div><div class="post_share"><div class="social-share" data-image="https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg" data-sites="facebook,twitter,wechat,weibo,qq"></div><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/social-share.js/dist/css/share.min.css"/><script src="https://cdn.jsdelivr.net/npm/social-share.js/dist/js/social-share.min.js"></script></div></div><nav class="pagination-post" id="pagination"><div class="prev-post pull-left"><a href="/year/10/09/%E9%AB%98%E6%80%A7%E8%83%BDLua%E4%BB%A3%E7%A0%81"><img class="prev-cover" data-src="https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg" onerror="onerror=null;src='/img/404.jpg'"><div class="pagination-info"><div class="label">上一篇</div><div class="prev_info">高性能Lua代码</div></div></a></div><div class="next-post pull-right"><a href="/year/10/09/%E6%B8%B2%E6%9F%93%E5%9F%BA%E7%A1%80"><img class="next-cover" data-src="https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg" onerror="onerror=null;src='/img/404.jpg'"><div class="pagination-info"><div class="label">下一篇</div><div class="next_info">渲染基础</div></div></a></div></nav><div class="relatedPosts"><div class="relatedPosts_headline"><i class="fas fa-thumbs-up fa-fw"></i><span> 相关推荐</span></div><div class="relatedPosts_list"><div class="relatedPosts_item"><a href="/year/10/29/AddressableAsset使用" title="AddressableAsset使用"><img class="relatedPosts_cover" data-src="https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"><div class="relatedPosts_main is-center"><div class="relatedPosts_date"><i class="far fa-calendar-alt fa-fw"></i> 2020-10-29</div><div class="relatedPosts_title">AddressableAsset使用</div></div></a></div><div class="relatedPosts_item"><a href="/year/10/09/AddressableAsset源码学习" title="AddressableAsset源码学习"><img class="relatedPosts_cover" data-src="https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"><div class="relatedPosts_main is-center"><div class="relatedPosts_date"><i class="far fa-calendar-alt fa-fw"></i> 2020-10-09</div><div class="relatedPosts_title">AddressableAsset源码学习</div></div></a></div><div class="relatedPosts_item"><a href="/year/10/09/OdinInspector" title="Odin Inspector Editor"><img class="relatedPosts_cover" data-src="https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"><div class="relatedPosts_main is-center"><div class="relatedPosts_date"><i class="far fa-calendar-alt fa-fw"></i> 2020-10-09</div><div class="relatedPosts_title">Odin Inspector Editor</div></div></a></div><div class="relatedPosts_item"><a href="/year/10/09/批量减FBX面片" title="Unity批量减FBX面片"><img class="relatedPosts_cover" data-src="https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"><div class="relatedPosts_main is-center"><div class="relatedPosts_date"><i class="far fa-calendar-alt fa-fw"></i> 2020-10-09</div><div class="relatedPosts_title">Unity批量减FBX面片</div></div></a></div><div class="relatedPosts_item"><a href="/year/10/09/高性能Lua代码" title="高性能Lua代码"><img class="relatedPosts_cover" data-src="https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg"><div class="relatedPosts_main is-center"><div class="relatedPosts_date"><i class="far fa-calendar-alt fa-fw"></i> 2020-10-09</div><div class="relatedPosts_title">高性能Lua代码</div></div></a></div></div></div></article></main><footer id="footer" data-type="color"><div id="footer-wrap"><div class="copyright">&copy;2020 - 2022  <i id="heartbeat" class="fa fas fa-heartbeat"></i> Yoyo</div><div class="framework-info"><span>驱动 </span><a target="_blank" rel="noopener" href="https://hexo.io"><span>Hexo</span></a><span class="footer-separator">|</span><span>主题 </span><a target="_blank" rel="noopener" href="https://github.com/jerryc127/hexo-theme-butterfly"><span>Butterfly</span></a></div></div><head><link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/HCLonely/images@master/others/heartbeat.min.css"></head></footer></div><section id="rightside"><div id="rightside-config-hide"><button id="readmode" type="button" title="阅读模式"><i class="fas fa-book-open"></i></button><button id="font_plus" type="button" title="放大字体"><i class="fas fa-plus"></i></button><button id="font_minus" type="button" title="缩小字体"><i class="fas fa-minus"></i></button><button id="translateLink" type="button" title="简繁转换">繁</button><button id="darkmode" type="button" title="浅色和深色模式转换"><i class="fas fa-adjust"></i></button></div><div id="rightside-config-show"><button id="rightside_config" type="button" title="设置"><i class="fas fa-cog"></i></button><button class="close" id="mobile-toc-button" type="button" title="目录"><i class="fas fa-list-ul"></i></button><button id="go-up" type="button" title="回到顶部"><i class="fas fa-arrow-up"></i></button></div></section><script src="https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js"></script><script src="/js/utils.js"></script><script src="/js/main.js"></script><script src="/js/tw_cn.js"></script><script src="https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js"></script><script src="https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js"></script><script src="https://cdn.jsdelivr.net/npm/node-snackbar/dist/snackbar.min.js"></script><script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script><script src="https://cdn.jsdelivr.net/npm/instant.page/instantpage.min.js" type="module" defer></script><script src="https://cdn.jsdelivr.net/npm/vanilla-lazyload/dist/lazyload.iife.min.js" async></script><script src="/js/calendar.js"></script><script src="/js/languages.js"></script></body></html>